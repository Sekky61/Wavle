---
---

<div class="wave-controls">
  <div class="sliders">
    <div class="slider-group">
      <label for="amplitude">Amplitude</label>
      <input type="range" id="amplitude" min="0" max="1" step="0.01" value="0.5" orient="vertical">
      <input type="number" id="amplitude-text" min="0" max="1" step="0.01" value="0.5">
    </div>
    <div class="slider-group">
      <label for="frequency">Frequency</label>
      <input type="range" id="frequency" min="0" max="10" step="0.1" value="1" orient="vertical">
      <input type="number" id="frequency-text" min="0" max="10" step="0.1" value="1">
    </div>
    <div class="slider-group">
      <label for="phase">Phase</label>
      <input type="range" id="phase" min="0" max="6.28" step="0.01" value="0" orient="vertical">
      <input type="number" id="phase-text" min="0" max="6.28" step="0.01" value="0">
    </div>
  </div>
  <button id="submit-wave">Submit</button>
</div>

<div id="attempts-display"></div>

<script>
  const amplitudeSlider = document.getElementById('amplitude');
  const amplitudeText = document.getElementById('amplitude-text');
  const frequencySlider = document.getElementById('frequency');
  const frequencyText = document.getElementById('frequency-text');
  const phaseSlider = document.getElementById('phase');
  const phaseText = document.getElementById('phase-text');
  const submitButton = document.getElementById('submit-wave');
  const attemptsDisplay = document.getElementById('attempts-display');

  // Sync sliders and text inputs
  function syncInputs(slider, text) {
    slider.addEventListener('input', () => text.value = slider.value);
    text.addEventListener('input', () => slider.value = text.value);
  }

  syncInputs(amplitudeSlider, amplitudeText);
  syncInputs(frequencySlider, frequencyText);
  syncInputs(phaseSlider, phaseText);

  let attemptCount = 0;

  submitButton.addEventListener('click', () => {
    const wave = {
      amplitude: parseFloat(amplitudeSlider.value),
      frequency: parseFloat(frequencySlider.value),
      phase: parseFloat(phaseSlider.value)
    };

    // Dispatch event for GameBoard to handle
    document.dispatchEvent(new CustomEvent('addWave', { detail: wave }));

    // Display attempt
    attemptCount++;
    const attemptDiv = document.createElement('div');
    attemptDiv.classList.add('attempt');
    attemptDiv.textContent = `Attempt ${attemptCount}: A=${wave.amplitude.toFixed(2)}, F=${wave.frequency.toFixed(2)}, P=${wave.phase.toFixed(2)}`;
    attemptsDisplay.prepend(attemptDiv);
  });
</script>

<style>
  .wave-controls {
    display: flex;
    background-color: #f0f0f0;
    padding: 20px;
    border-radius: 10px;
    margin-bottom: 20px;
  }

  .sliders {
    display: flex;
    gap: 20px;
  }

  .slider-group {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  label {
    margin-bottom: 10px;
  }

  input[type="range"] {
    -webkit-appearance: slider-vertical;
    width: 20px;
    height: 150px;
    margin: 0 10px;
  }

  input[type="number"] {
    width: 60px;
    margin-top: 10px;
  }

  button {
    align-self: flex-end;
    margin-left: 20px;
    padding: 10px 20px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }

  button:hover {
    background-color: #45a049;
  }

  #attempts-display {
    margin-top: 20px;
  }

  .attempt {
    background-color: #e0e0e0;
    padding: 10px;
    margin-bottom: 10px;
    border-radius: 5px;
  }
</style>
